openapi: 3.0.3
info:
  title: Parkemon Go API
  description: API for parking place and car scanning service.
  contact:
    name: Parkemon Go Support
    url: https://parkemon-go.com/support
    email: support@parkemon-go.com
  version: 1.0.0
servers:
- url: https://api.parkemon-go.com/v1
  description: Production server
security:
- ApiKeyAuth: []
paths:
  /scans:
    get:
      summary: Get scans in a specific area
      description: Fetch paginated scan entries within a specific area and radius.
      operationId: scansGET
      parameters:
      - name: lat
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: float
          example: 37.7749
      - name: long
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: float
          example: -122.4194
      - name: radius
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: float
          example: 1.5
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 10
          default: 10
      - name: offset
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 0
          default: 0
      responses:
        "200":
          description: List of scans
          headers:
            X-RateLimit-Limit:
              description: The number of allowed requests in the current period
              style: simple
              explode: false
              schema:
                type: integer
                example: 1000
            X-RateLimit-Remaining:
              description: The number of remaining requests in the current period
              style: simple
              explode: false
              schema:
                type: integer
                example: 999
            X-RateLimit-Reset:
              description: The time when the rate limit will reset
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
                example: 2024-05-16T00:00:00Z
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedScans'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Not found
        "500":
          description: Internal server error
      x-swagger-router-controller: Default
    post:
      summary: Create a new scan
      description: Submit a new scan entry to the Parkemon Go system.
      operationId: scansPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scan'
        required: true
      responses:
        "201":
          description: Scan created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scan'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
      x-swagger-router-controller: Default
  /scans/street:
    get:
      summary: Get scans for a specific street
      description: Fetch paginated scan entries for a specific street.
      operationId: scansStreetGET
      parameters:
      - name: street
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: Market Street
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 10
          default: 10
      - name: offset
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 0
          default: 0
      responses:
        "200":
          description: List of scans
          headers:
            X-RateLimit-Limit:
              description: The number of allowed requests in the current period
              style: simple
              explode: false
              schema:
                type: integer
                example: 1000
            X-RateLimit-Remaining:
              description: The number of remaining requests in the current period
              style: simple
              explode: false
              schema:
                type: integer
                example: 999
            X-RateLimit-Reset:
              description: The time when the rate limit will reset
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
                example: 2024-05-16T00:00:00Z
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedScans'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Not found
        "500":
          description: Internal server error
      x-swagger-router-controller: Default
  /pricing:
    get:
      summary: Get API pricing information
      description: Retrieve pricing information for the Parkemon Go API.
      operationId: pricingGET
      responses:
        "200":
          description: Pricing information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "500":
          description: Internal server error
      x-swagger-router-controller: Default
  /register:
    post:
      summary: Register for an API key
      description: Register to obtain an API key for accessing the Parkemon Go API.
      operationId: registerPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/register_body'
        required: true
      responses:
        "201":
          description: "Registration successful, API key generated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
        "400":
          description: Bad request
        "500":
          description: Internal server error
      x-swagger-router-controller: Default
components:
  schemas:
    Scan:
      type: object
      properties:
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
        lat:
          type: number
          format: float
          example: 37.7749
        long:
          type: number
          format: float
          example: -122.4194
        project_id:
          type: number
          example: 101
        created_at:
          type: string
          format: date-time
          example: 2023-05-15T13:45:30Z
        vehicle_type:
          type: integer
          example: 1
        vehicle_plate:
          type: string
          example: XYZ1234
        vehicle_color:
          type: string
          example: Blue
        vehicle_make:
          type: string
          example: Toyota
        vehicle_model:
          type: string
          example: Corolla
      example:
        vehicle_make: Toyota
        vehicle_color: Blue
        vehicle_plate: XYZ1234
        project_id: 101
        vehicle_model: Corolla
        created_at: 2023-05-15T13:45:30Z
        vehicle_type: 1
        id: 123e4567-e89b-12d3-a456-426614174000
        lat: 37.7749
        long: -122.4194
    PaginatedScans:
      type: object
      properties:
        total:
          type: integer
          example: 100
        limit:
          type: integer
          example: 10
        offset:
          type: integer
          example: 0
        scans:
          type: array
          items:
            $ref: '#/components/schemas/Scan'
      example:
        total: 100
        offset: 0
        scans:
        - vehicle_make: Toyota
          vehicle_color: Blue
          vehicle_plate: XYZ1234
          project_id: 101
          vehicle_model: Corolla
          created_at: 2023-05-15T13:45:30Z
          vehicle_type: 1
          id: 123e4567-e89b-12d3-a456-426614174000
          lat: 37.7749
          long: -122.4194
        - vehicle_make: Toyota
          vehicle_color: Blue
          vehicle_plate: XYZ1234
          project_id: 101
          vehicle_model: Corolla
          created_at: 2023-05-15T13:45:30Z
          vehicle_type: 1
          id: 123e4567-e89b-12d3-a456-426614174000
          lat: 37.7749
          long: -122.4194
        limit: 10
    inline_response_200:
      type: object
      properties:
        basic:
          type: string
          example: "$10/month for up to 1,000 requests"
        pro:
          type: string
          example: "$50/month for up to 10,000 requests"
        enterprise:
          type: string
          example: Contact us for enterprise pricing
      example:
        enterprise: Contact us for enterprise pricing
        basic: "$10/month for up to 1,000 requests"
        pro: "$50/month for up to 10,000 requests"
    register_body:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@example.com
    inline_response_201:
      type: object
      properties:
        api_key:
          type: string
          example: abcdef123456
      example:
        api_key: abcdef123456
  parameters:
    lat:
      name: lat
      in: query
      required: true
      style: form
      explode: true
      schema:
        type: number
        format: float
        example: 37.7749
    long:
      name: long
      in: query
      required: true
      style: form
      explode: true
      schema:
        type: number
        format: float
        example: -122.4194
    radius:
      name: radius
      in: query
      required: true
      style: form
      explode: true
      schema:
        type: number
        format: float
        example: 1.5
    street:
      name: street
      in: query
      required: true
      style: form
      explode: true
      schema:
        type: string
        example: Market Street
    limit:
      name: limit
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: integer
        example: 10
        default: 10
    offset:
      name: offset
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: integer
        example: 0
        default: 0
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-Key
      in: header
